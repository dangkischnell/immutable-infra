# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "ami_desc" {
  type    = string
  default = ""
}

variable "ami_owner" {
  type    = string
  default = ""
}

variable "ansible_dir_path" {
  type    = string
  default = ""
}

variable "instance_type" {
  type    = string
  default = ""
}

variable "packer_remote_user" {
  type    = string
  default = ""
}

variable "private_key" {
  type    = string
  default = ""
}

variable "project_name" {
  type    = string
  default = "packer-demo"
}

variable "public_key" {
  type    = string
  default = ""
}

variable "region_name" {
  type    = string
  default = ""
}

variable "role_name" {
  type    = string
  default = "${env("role_name")}"
}

variable "security_group_id" {
  type    = string
  default = ""
}

variable "ssh_username" {
  type    = string
  default = "ubuntu"
}

variable "subnet_id" {
  type    = string
  default = ""
}

variable "volume_size" {
  type    = string
  default = ""
}

variable "volume_type" {
  type    = string
  default = ""
}

variable "vpc_id" {
  type    = string
  default = ""
}

# The amazon-ami data block is generated from your amazon builder source_ami_filter; a data
# from this block can be referenced in source and locals blocks.
# Read the documentation for data blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/data
# Read the documentation for the Amazon AMI Data Source here:
# https://www.packer.io/plugins/datasources/amazon/ami
data "amazon-ami" "autogenerated_1" {
  filters = {
    architecture     = "x86_64"
    description      = "${var.ami_desc}"
    root-device-type = "ebs"
  }
  most_recent = true
  owners      = ["${var.ami_owner}"]
  region      = "${var.region_name}"
}

# "timestamp" template function replacement
locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

# All locals variables are generated from variables that uses expressions
# that are not allowed in HCL2 variables.
# Read the documentation for locals blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/locals
locals {
  build_ts = "${local.timestamp}"
}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
# could not parse template for following block: "template: hcl2_upgrade:2: bad character U+0060 '`'"

source "amazon-ebs" "ebs-{{_user_`project_name`_}}-{{_user_`security_group_id`_}}-{{_user_`role_name`_}}" {
  ami_description             = "{{ user `project_name` }}-{{ user `role_name` }}_{{ user `region_name` }}_{{ user `build_ts` }} AMI"
  ami_name                    = "{{ user `project_name` }}-{{ user `role_name` }}_{{ user `build_ts` }}"
  associate_public_ip_address = true
  instance_type               = "{{ user `instance_type` }}"
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sda1"
    volume_size           = "{{ user `volume_size` }}"
    volume_type           = "{{ user `volume_type` }}"
  }
  region               = "{{ user `region_name` }}"
  security_group_id    = "{{ user `security_group_id` }}"
  source_ami           = "{{ data `amazon-ami.autogenerated_1.id` }}"
  ssh_keypair_name     = "{{ user `public_key` }}"
  ssh_private_key_file = "{{ user `private_key` }}"
  ssh_username         = "{{ user `packer_remote_user` }}"
  subnet_id            = "{{ user `subnet_id` }}"
  vpc_id               = "{{ user `vpc_id` }}"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  description = "package image for {{ user `role_name` }}"

  sources = ["source.amazon-ebs.ebs-{{_user_`project_name`_}}-{{_user_`security_group_id`_}}-{{_user_`role_name`_}}"]

  provisioner "shell" {
    script = "scripts/wait-cloud-init-complete.sh"
  }

  provisioner "ansible" {
    extra_arguments = ["--tags", "packer-imaging", "--extra-vars", "ansible_python_interpreter='/usr/bin/env python3'", "--extra-vars", "packer_remote_user=${var.packer_remote_user}", "--extra-vars", "role_name=${var.role_name}"]
    galaxy_file     = "${var.ansible_dir_path}/ansible/galaxy-requirements.yml"
    playbook_file   = "${var.ansible_dir_path}/ansible/packer-imaging_${var.role_name}.yml"
    user            = "${var.packer_remote_user}"
  }

  provisioner "shell" {
    script = "scripts/doing-something.sh"
  }

